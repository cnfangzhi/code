plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}


android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.gradledemo"
//        applicationIdSuffix "aaa" // 往applicationId加后缀
        minSdk 26
        targetSdk 32
        versionCode 1
        versionName "1.0"
        //versionNameSuffix '' //versionName后缀

        manifestPlaceholders = [CHANNEL_VALUE: 'dongnao/maniu']
        resValue 'string', 'aaa', 'aaa'
        buildConfigField 'Boolean', 'DEBUG', 'false'

        // DexOpt会把每一个类的方法id检索起来，存在一个链表结构里面。
        // 这个链表的长度是用short类型来保存的，这就使得方法数id不能超过65535。
        // 一个dex方法数不能超出65535.
        // 1.设置multiDexEnabled true
        // 2.创建MyApplication 继承MultiDexApplication
        // 3.AndroidManifest指定MyApplication
        // 4.或者重写Application的attachBaseContext 调用MultiDex.install(this)
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // 每个BuildType都有一个SourceSet
    // 包含源码，源文件等信息
    sourceSets {
        main {
//            manifest.srcFile 'src/main/debug/AndroidManifest.xml'
//            java.srcDirs = ['src']
//            resources.srcDirs = ['src']
//            aidl.srcDirs = ['src']
//            renderscript.srcDirs = ['src']
//            res.srcDirs = ['res']
//            assets.srcDirs = ['assets']
//            jniLibs.srcDirs = ['libs']

            java {
                //exclude 'src/main/com/fz/gradledemo04/Test.java'
//                if(DEBUG){
//
//                }else {
//
//                }
                //srcDir 'src/java'
            }

            /*resources{
                srcDir 'src/java'
            }*/
        }
    }

    // adb的操作选项
//    adbOptions {
//        timeOutInMs = 5000 // ms
//
//        installOptions '-r', '-s'
//        //-l, -t, -d, -g
//        // -d 允许降级安装
//        // -g 为应有获取所有运行时的权限
//        // -l 锁定该应用程序
//        // -r 替换已经存在的应用程序，强制安装
//        // -t 允许测试包
//        // -s 把应用装到sk卡上
//    }

//    javaCompileOptions {
//        annotationProcessorOptions {
//            arguments += [A: 'a']
//        }
//    }

//    flavorDimensions "channel"/*, "charge"*/ // 维度，就是针对一种类型的产品风味的描述

    // [flavorDimensions]X[productFlavors]x[release,debug]
    // 产品风味的自定义，也就是变种
//    productFlavors {
//        huawei {
//            dimension "channel"
//            manifestPlaceholders = [CHANNEL_VALUE: 'huawei']
//        }
//
//        oppo {
//            dimension "channel"
//            manifestPlaceholders = [CHANNEL_VALUE: 'oppo']
//        }
//
//        free {
//            dimension "charge"
//        }
//
//        paid {
//            dimension "charge"
//        }
//    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 遍历所有的产品风味
                productFlavors.each { flavor ->
                    //gradle_v1.0_huawei_release.apk
                    def fileName = "gradle_v${defaultConfig.versionName}_${flavor.manifestPlaceholders.CHANNEL_VALUE}_release.apk"
                    outputFileName = fileName
                }
            }
        }
    }

    buildTypes {
        release {
            shrinkResources true // 清理无效资源
            minifyEnabled true // 是否启用代码混淆
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug{

        }
        custom {
            initWith release
            applicationIdSuffix "custom"
        }
    }

    // 配置应用的签名信息
    signingConfigs {
        release {
            storeFile file('key_store.jks')
            storePassword "a123123"
            keyAlias "aaa"
            keyPassword "a123123"
        }
        debug {
            storeFile file('key_store.jks')
            storePassword "a123123"
            keyAlias "aaa"
            keyPassword "a123123"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

configurations {
    configuration {
        all*.exclude module:"annotation"
    }
}

configurations.all {
    resolutionStrategy {
        force 'androidx.constraintlayout:constraintlayout:2.0.0'
    }
}

dependencies {

    implementation deps.androidx.corektx
    implementation ("${deps.androidx.appcompat}") {
        exclude group: 'androidx.savedstate',module: 'savedstate'
//        exclude group: 'androidx.drawerlayout', module: 'drawerlayout'
    }
    implementation deps.material
    implementation deps.androidx.constraintlayout
    testImplementation deps.junit
    androidTestImplementation deps.androidx.test.junit
    androidTestImplementation deps.androidx.test.espressoCore
}

class ZipTask extends DefaultTask {

//    @Input
//    @Optional
    // 表示可选
    String from

//    @OutputFile
//    @Optional
    // 表示可选
    File out

    ZipTask() {
        group "自定义任务"
        description "自定义任务描述"
        outputs.upToDateWhen {
            false//  增量构建，每次都会开启，不会跳过任务
        }
    }

    @TaskAction
    void fun() {
        println " @TaskAction fun()"
        println from
        println out

        //文件进行操作
        //inputs.files.first()
        println inputs.files.singleFile
        def inFile = inputs.files.singleFile

        def file = outputs.files.singleFile
        file.createNewFile()
        file.text = inFile.text
    }
}

task myTask(type: ZipTask) {
    from = "a/b/c" // 输入
    out = file("test.txt") // 输出
    inputs.file file('build.gradle')
    outputs.file file('test.txt')
}

afterEvaluate {

    println tasks.getByName("packageDebug")

    task zip(type: Zip) {
        archiveName "outputs2.zip"// 输出的文件名字
        destinationDir file("${buildDir}/custom")// 输出的文件存放的文件夹
        from tasks.getByName("packageDebug").outputs.files// 输入的文件
        tasks.getByName("packageDebug").outputs.files.each {
            println it
        }
    }
}

// Gradle提供的钩子函数
// 配置阶段：
gradle.beforeProject {
    println "gradle.beforeProject"
}
gradle.afterProject {
    println "gradle.afterProject"
}
gradle.taskGraph.whenReady {
    println "gradle.taskGraph.whenReady"
}
beforeEvaluate {
    // 在root无效
    println "beforeEvaluate"
}
afterEvaluate {
    println "afterEvaluate"
}

// 为gradle设置监听
gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
    @Override
    void beforeEvaluate(Project project) {
        println "beforeEvaluate"
    }

    @Override
    void afterEvaluate(Project project, ProjectState state) {
        println "afterEvaluate"
    }
})
gradle.addBuildListener(new BuildListener() {
    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void buildFinished(BuildResult result) {

    }
})


// 插件：1. 脚本插件
apply from: "../script.gradle"
// 2. 二进制插件

class MyPlugin implements Plugin<Project> {

    @Override
    void apply(Project target) {
        println "MyPlugin apply"

        target.afterEvaluate {
            println target.tasks.getByName("packageDebug")
            target.task(type: Zip, "zipDebug") {
                archiveName "outputs4.zip"// 输出的文件名字
                destinationDir target.file("${target.buildDir}/custom")// 输出的文件存放的文件夹
                from target.tasks.getByName("packageDebug").outputs.files// 输入的文件
                target.tasks.getByName("packageDebug").outputs.files.each {
                    println it
                }
            }
        }
    }
}

apply plugin: MyPlugin
apply plugin: MyPlugin2